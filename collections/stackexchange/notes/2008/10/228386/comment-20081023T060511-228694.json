{"id": 228694, "name": "rboyd", "url": "https://stackoverflow.com/users/29753/rboyd", "text": "Although I don't have the exact answer to your question (what command line arguments Flex Builder passes to mxmlc.exe), I do have a meta-answer for you.  You can find the command line by using one of two methods.\r\n\r\nThe first is platform-agnostic but will require you to compile a small C++ program.  I've used this approach before when solving similar problems.  What you can do is create a wrapper application which simply outputs the command line to a file.  Build this application and drop it in as a temporary replacement for your mxmlc.exe, and when Flex Builder executes it you'll be able to access the resulting file \"cmdline.txt\" to get the full command line that it was called with:\r\n\r\n    #include <iostream>\r\n    #include <fstream>\r\n    using namespace std;\r\n    \r\n    int main(int argc, char* argv[])\r\n    {\r\n      ofstream cmdLine;\r\n      cmdLine.open(\"cmdline.txt\");\r\n    \r\n      for (int i = 0; i < argc; i++) {\r\n        cmdLine << argv[i];\r\n        if (i < argc)\r\n          cmdLine << \" \";\r\n      }\r\n    \r\n      cmdLine.close();\r\n      return 0;\r\n    }\r\n\r\nIf you don't feel right about playing this dirty trick on Flex Builder, there is an alternative assuming you're running on Windows.  You can use [WMI][1] to iterate over all of the running processes and grab their command line information.  Ruby being my language of choice, this would require you to install the Ruby interpreter for Windows which you can do easily with the [One-Click Ruby Installer for Windows][2].\r\n\r\nAfter installing, just run this script as soon as Flex Builder kicks off your build:\r\n\r\n    require 'win32ole'\r\n    wmi = WIN32OLE.connect(\"winmgmts://\")\r\n    processes = wmi.ExecQuery(\"select * from win32_process\")\r\n    \r\n    for process in processes do\r\n        cmdLine = process.CommandLine\r\n        puts \"Command line: #{cmdLine}\" if cmdLine =~ /mxmlc/\r\n    end\r\n\r\n\r\nI've added in a regular expression to print out the command line only for processes which were started with \"mxmlc\" in the command line (which should work for your needs).  For a more general solution of iterating over each process, just remove the if clause at the end of the line containing:\r\n\r\n    puts \"Command line: #{cmdLine}\" if cmdLine =~ /mxmlc/\r\n\r\nThis will save you the headache of doing any low-level magic with StartRemoteThread and navigating through the PEB structures.\r\n\r\nThat's about the best I could do considering the nature of your question and without more information regarding your development OS.  If this solves your problem I might suggest that you edit your post so that people facing similar issues can find this solution.  A title like \"How to get command line arguments for a running process\" might be more apt.\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Windows_Management_Instrumentation\r\n  [2]: http://rubyinstaller.rubyforge.org/", "date": "2008-10-23 06:05:11", "photo": "https://www.gravatar.com/avatar/a299f5b6497e022c674e8c3dfbcf5c4c?s=128&d=identicon&r=PG&f=1", "source_url": "https://stackoverflow.com/questions/228386/how-to-get-command-line-arguments-for-a-running-process", "mention_url": "https://stackoverflow.com/questions/228386/how-to-get-command-line-arguments-for-a-running-process", "source": "stackexchange"}