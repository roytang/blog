{"id": 18363307, "name": "Dirty Henry", "url": "https://stackoverflow.com/users/455016/dirty-henry", "text": "Here is some code that returns a Credential object (bean object holding login and password).\r\n\r\n    public Credentials credentialsWithBasicAuthentication(HttpServletRequest req) {\r\n        String authHeader = req.getHeader(\"Authorization\");\r\n        if (authHeader != null) {\r\n            StringTokenizer st = new StringTokenizer(authHeader);\r\n            if (st.hasMoreTokens()) {\r\n                String basic = st.nextToken();\r\n\r\n                if (basic.equalsIgnoreCase(\"Basic\")) {\r\n                    try {\r\n                        String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\r\n                        LOG.debug(\"Credentials: \" + credentials);\r\n                        int p = credentials.indexOf(\":\");\r\n                        if (p != -1) {\r\n                            String login = credentials.substring(0, p).trim();\r\n                            String password = credentials.substring(p + 1).trim();\r\n\r\n                            return new Credentials(login, password);\r\n                        } else {\r\n                            LOG.error(\"Invalid authentication token\");\r\n                        }\r\n                    } catch (UnsupportedEncodingException e) {\r\n                        LOG.warn(\"Couldn't retrieve authentication\", e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\nIt works well, even with a password as funky as :&=/?\u00e9$\u00a3.\r\n\r\nHere is a basic unit test for the class, using jMock:\r\n\r\n    public void testCredentialsWithBasicAuthentication() {\r\n        // Setup\r\n        final HttpServletRequest request = context.mock(HttpServletRequest.class);\r\n        \r\n        AuthentificationHelper helper = new AuthentificationHelper();\r\n        String login = \"mickael\";\r\n        String password = \":&=/?\u00e9$\u00a3\";\r\n        String base64Hash = Base64.encodeString(login + \":\" + password);\r\n        final String authHeader = \"Basic \" + base64Hash;\r\n        \r\n        // Expectations\r\n        context.checking(new Expectations() {\r\n            {\r\n                oneOf (request).getHeader(\"Authorization\");\r\n                will(returnValue(authHeader));\r\n            }   \r\n        });\r\n        \r\n        // Execute\r\n        Credentials credentials = helper.credentialsWithBasicAuthentication(request);\r\n        \r\n        // Verify\r\n        assertNotNull(credentials);\r\n        assertEquals(login, credentials.getLogin());\r\n        assertEquals(password, credentials.getPassword());\r\n        \r\n        context.assertIsSatisfied();\r\n    }\r\n", "date": "2013-08-21 16:50:41", "photo": "https://www.gravatar.com/avatar/3a3a44315d8b820a7c8c8cf774c7a782?s=128&d=identicon&r=PG", "source_url": "https://stackoverflow.com/questions/15611653/implementing-http-basic-authentication-in-a-servlet", "mention_url": "https://stackoverflow.com/questions/15611653/implementing-http-basic-authentication-in-a-servlet", "source": "stackexchange"}