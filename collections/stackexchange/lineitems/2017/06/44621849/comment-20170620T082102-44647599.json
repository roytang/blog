{"id": 44647599, "name": "Tamas", "url": "https://stackoverflow.com/users/969460/tamas", "text": "As an alternative to Dave's suggestion you can do something similar in Node.js but again, the work/code would have to be developed by you.\r\n\r\nOption 1)\r\n\r\n    db.values.read(\r\n      vb.fromIndexes('name', 'amount')\r\n    )\r\n    .result()\r\n\r\nthis code here creates a value co-occurance of names and amounts - you can then go and process this information.\r\n\r\nOption 2)\r\n\r\nGet the names from the indexes, then feed that information to another function that would get the amounts and sum them up:\r\n\r\n    function getNames() {\r\n      return db.values.read(\r\n        vb.fromIndexes('name')\r\n      )\r\n      .result();\r\n    }\r\n    \r\n    function getSum(names) {\r\n      const promises = names.map(name => {\r\n         return db.values.read(\r\n          vb.fromIndexes('amount')\r\n          .aggregates('sum')\r\n          .where(vb.parsedFrom(`name:${name}`,\r\n                 vb.parseBindings(vb.value('name', vb.bind('name')))\r\n        ))).result();\r\n      });\r\n      return Promise.all(promises);\r\n    };\r\n    \r\n    getNames()\r\n    .then(response => {\r\n      const names = response['values-response'].tuple.map(name => name['distinct-value'].toString());\r\n      console.log(names); //this will hold all the names\r\n      return getSum(names);\r\n    })\r\n    .then(response => {\r\n      const sums = response.map(r => {\r\n        return r['values-response']['aggregate-result'][0];\r\n      }).map(s => s._value);\r\n      console.log(sums); //this will hold all the sums\r\n    })\r\n    .catch(error => console.log(error));\r\n\r\nOption 3)\r\n\r\nWhat Dave suggested - create the SJS extension, and call that from Node.js", "date": "2017-06-20 08:21:02", "photo": "https://i.stack.imgur.com/sl8Ma.png?s=128&g=1", "source_url": "https://stackoverflow.com/questions/44621849/marklogic-node-js-api-group-by-sum", "mention_url": "https://stackoverflow.com/questions/44621849/marklogic-node-js-api-group-by-sum", "source": "stackexchange"}